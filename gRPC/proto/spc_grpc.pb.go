// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: gRPC/proto/spc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceProductionCalendarClient is the client API for ServiceProductionCalendar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceProductionCalendarClient interface {
	GetAllHoliday(ctx context.Context, in *GetAllHolidayRequest, opts ...grpc.CallOption) (*GetAllHolidayResponse, error)
	GetHoliday(ctx context.Context, in *GetHolidayRequest, opts ...grpc.CallOption) (*GetHolidayResponse, error)
	HolidayCreate(ctx context.Context, in *AddHolidayRequest, opts ...grpc.CallOption) (*AddHolidayResponse, error)
	UpdateHoliday(ctx context.Context, in *EditHolidayRequest, opts ...grpc.CallOption) (*EditHolidayResponse, error)
	DeleteHoliday(ctx context.Context, in *DeleteHolidayRequest, opts ...grpc.CallOption) (*DeleteHolidayResponse, error)
}

type serviceProductionCalendarClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceProductionCalendarClient(cc grpc.ClientConnInterface) ServiceProductionCalendarClient {
	return &serviceProductionCalendarClient{cc}
}

func (c *serviceProductionCalendarClient) GetAllHoliday(ctx context.Context, in *GetAllHolidayRequest, opts ...grpc.CallOption) (*GetAllHolidayResponse, error) {
	out := new(GetAllHolidayResponse)
	err := c.cc.Invoke(ctx, "/ServiceProductionCalendar/GetAllHoliday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductionCalendarClient) GetHoliday(ctx context.Context, in *GetHolidayRequest, opts ...grpc.CallOption) (*GetHolidayResponse, error) {
	out := new(GetHolidayResponse)
	err := c.cc.Invoke(ctx, "/ServiceProductionCalendar/GetHoliday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductionCalendarClient) HolidayCreate(ctx context.Context, in *AddHolidayRequest, opts ...grpc.CallOption) (*AddHolidayResponse, error) {
	out := new(AddHolidayResponse)
	err := c.cc.Invoke(ctx, "/ServiceProductionCalendar/HolidayCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductionCalendarClient) UpdateHoliday(ctx context.Context, in *EditHolidayRequest, opts ...grpc.CallOption) (*EditHolidayResponse, error) {
	out := new(EditHolidayResponse)
	err := c.cc.Invoke(ctx, "/ServiceProductionCalendar/UpdateHoliday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceProductionCalendarClient) DeleteHoliday(ctx context.Context, in *DeleteHolidayRequest, opts ...grpc.CallOption) (*DeleteHolidayResponse, error) {
	out := new(DeleteHolidayResponse)
	err := c.cc.Invoke(ctx, "/ServiceProductionCalendar/DeleteHoliday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceProductionCalendarServer is the server API for ServiceProductionCalendar service.
// All implementations must embed UnimplementedServiceProductionCalendarServer
// for forward compatibility
type ServiceProductionCalendarServer interface {
	GetAllHoliday(context.Context, *GetAllHolidayRequest) (*GetAllHolidayResponse, error)
	GetHoliday(context.Context, *GetHolidayRequest) (*GetHolidayResponse, error)
	HolidayCreate(context.Context, *AddHolidayRequest) (*AddHolidayResponse, error)
	UpdateHoliday(context.Context, *EditHolidayRequest) (*EditHolidayResponse, error)
	DeleteHoliday(context.Context, *DeleteHolidayRequest) (*DeleteHolidayResponse, error)
	mustEmbedUnimplementedServiceProductionCalendarServer()
}

// UnimplementedServiceProductionCalendarServer must be embedded to have forward compatible implementations.
type UnimplementedServiceProductionCalendarServer struct {
}

func (UnimplementedServiceProductionCalendarServer) GetAllHoliday(context.Context, *GetAllHolidayRequest) (*GetAllHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllHoliday not implemented")
}
func (UnimplementedServiceProductionCalendarServer) GetHoliday(context.Context, *GetHolidayRequest) (*GetHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHoliday not implemented")
}
func (UnimplementedServiceProductionCalendarServer) HolidayCreate(context.Context, *AddHolidayRequest) (*AddHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HolidayCreate not implemented")
}
func (UnimplementedServiceProductionCalendarServer) UpdateHoliday(context.Context, *EditHolidayRequest) (*EditHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHoliday not implemented")
}
func (UnimplementedServiceProductionCalendarServer) DeleteHoliday(context.Context, *DeleteHolidayRequest) (*DeleteHolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteHoliday not implemented")
}
func (UnimplementedServiceProductionCalendarServer) mustEmbedUnimplementedServiceProductionCalendarServer() {
}

// UnsafeServiceProductionCalendarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceProductionCalendarServer will
// result in compilation errors.
type UnsafeServiceProductionCalendarServer interface {
	mustEmbedUnimplementedServiceProductionCalendarServer()
}

func RegisterServiceProductionCalendarServer(s grpc.ServiceRegistrar, srv ServiceProductionCalendarServer) {
	s.RegisterService(&ServiceProductionCalendar_ServiceDesc, srv)
}

func _ServiceProductionCalendar_GetAllHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductionCalendarServer).GetAllHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceProductionCalendar/GetAllHoliday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductionCalendarServer).GetAllHoliday(ctx, req.(*GetAllHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductionCalendar_GetHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductionCalendarServer).GetHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceProductionCalendar/GetHoliday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductionCalendarServer).GetHoliday(ctx, req.(*GetHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductionCalendar_HolidayCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductionCalendarServer).HolidayCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceProductionCalendar/HolidayCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductionCalendarServer).HolidayCreate(ctx, req.(*AddHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductionCalendar_UpdateHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductionCalendarServer).UpdateHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceProductionCalendar/UpdateHoliday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductionCalendarServer).UpdateHoliday(ctx, req.(*EditHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceProductionCalendar_DeleteHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteHolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceProductionCalendarServer).DeleteHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ServiceProductionCalendar/DeleteHoliday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceProductionCalendarServer).DeleteHoliday(ctx, req.(*DeleteHolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceProductionCalendar_ServiceDesc is the grpc.ServiceDesc for ServiceProductionCalendar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceProductionCalendar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ServiceProductionCalendar",
	HandlerType: (*ServiceProductionCalendarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllHoliday",
			Handler:    _ServiceProductionCalendar_GetAllHoliday_Handler,
		},
		{
			MethodName: "GetHoliday",
			Handler:    _ServiceProductionCalendar_GetHoliday_Handler,
		},
		{
			MethodName: "HolidayCreate",
			Handler:    _ServiceProductionCalendar_HolidayCreate_Handler,
		},
		{
			MethodName: "UpdateHoliday",
			Handler:    _ServiceProductionCalendar_UpdateHoliday_Handler,
		},
		{
			MethodName: "DeleteHoliday",
			Handler:    _ServiceProductionCalendar_DeleteHoliday_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gRPC/proto/spc.proto",
}

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: spc/spc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SPCClient is the client API for SPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SPCClient interface {
	IsHoliday(ctx context.Context, in *HolidayRequest, opts ...grpc.CallOption) (*HolidayResponse, error)
}

type sPCClient struct {
	cc grpc.ClientConnInterface
}

func NewSPCClient(cc grpc.ClientConnInterface) SPCClient {
	return &sPCClient{cc}
}

func (c *sPCClient) IsHoliday(ctx context.Context, in *HolidayRequest, opts ...grpc.CallOption) (*HolidayResponse, error) {
	out := new(HolidayResponse)
	err := c.cc.Invoke(ctx, "/main.SPC/IsHoliday", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SPCServer is the server API for SPC service.
// All implementations must embed UnimplementedSPCServer
// for forward compatibility
type SPCServer interface {
	IsHoliday(context.Context, *HolidayRequest) (*HolidayResponse, error)
	mustEmbedUnimplementedSPCServer()
}

// UnimplementedSPCServer must be embedded to have forward compatible implementations.
type UnimplementedSPCServer struct {
}

func (UnimplementedSPCServer) IsHoliday(context.Context, *HolidayRequest) (*HolidayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsHoliday not implemented")
}
func (UnimplementedSPCServer) mustEmbedUnimplementedSPCServer() {}

// UnsafeSPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SPCServer will
// result in compilation errors.
type UnsafeSPCServer interface {
	mustEmbedUnimplementedSPCServer()
}

func RegisterSPCServer(s grpc.ServiceRegistrar, srv SPCServer) {
	s.RegisterService(&SPC_ServiceDesc, srv)
}

func _SPC_IsHoliday_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HolidayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SPCServer).IsHoliday(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.SPC/IsHoliday",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SPCServer).IsHoliday(ctx, req.(*HolidayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SPC_ServiceDesc is the grpc.ServiceDesc for SPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.SPC",
	HandlerType: (*SPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsHoliday",
			Handler:    _SPC_IsHoliday_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spc/spc.proto",
}
